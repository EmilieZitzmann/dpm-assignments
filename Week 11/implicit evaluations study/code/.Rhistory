scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels,
breaks = custom_order) +
labs(x = "Gender", y = "AMP Score") +
theme_minimal() +
theme(legend.position = c(0.51, 0.2), legend.background = element_rect(fill = "white"))
# Print the plot
print(raincloudplot2)
# you can combine things with patchwork
library(patchwork)
#First we have to remove the legends from the plots
splithistogram2_plot <- splithistogram2 + theme(legend.position = "none")
splitviolin2_plot <- splitviolin2 + theme(legend.position = "none")
raincloudplot2_plot <- raincloudplot2 + theme(legend.position = "none")
#Combining a plot (with +)
combined_plot <- splithistogram2_plot + splitviolin2_plot + raincloudplot2_plot
print(combined_plot)
#This does not look too pretty so you can modify the codes
# Customize the appearance of the combined plot
combined_plot <- (splithistogram2_plot + splitviolin2_plot + raincloudplot2_plot +
plot_layout(ncol = 3) +  # Set the number of columns
theme_minimal() +        # Use a minimal theme
theme(
plot.margin = margin(15, 15, 15, 15),  # Adjust overall margins
strip.text = element_text(size = 10),   # Adjust text size in facet labels
legend.position = "bottom",             # Move the legend to the bottom
legend.direction = "horizontal",        # Arrange legend items horizontally
legend.box = "horizontal"                # Use a horizontal legend box
)
)
# Print the customized combined plot
print(combined_plot)
#First we have to remove the legends from the plots
splithistogram2_plot <- splithistogram2 + theme(legend.position = "none") +  labs(x = "", y = "")
splitviolin2_plot <- splitviolin2 + theme(legend.position = "none") +  labs(x = "", y = "")
raincloudplot2_plot <- raincloudplot2 + theme(legend.position = "none") +  labs(x = "", y = "")
#Combining a plot (with +)
combined_plot <- splithistogram2_plot + splitviolin2_plot + raincloudplot2_plot
print(combined_plot)
#First we have to remove the legends from the plots
splithistogram2_plot <- splithistogram2 + theme(legend.position = "none")
splitviolin2_plot <- splitviolin2 + theme(legend.position = "none")
raincloudplot2_plot <- raincloudplot2 + theme(legend.position = "none")
#Combining a plot (with +)
combined_plot <- splithistogram2_plot + splitviolin2_plot + raincloudplot2_plot
print(combined_plot)
print(combined_plot)
# Customize the appearance of the combined plot
combined_plot <- (splithistogram2_plot + splitviolin2_plot + raincloudplot2_plot +
plot_layout(ncol = 3) +  # Set the number of columns
theme_minimal() +        # Use a minimal theme
theme(
plot.margin = margin(15, 15, 15, 15),  # Adjust overall margins
strip.text = element_text(size = 10),   # Adjust text size in facet labels
legend.position = "bottom",             # Move the legend to the bottom
legend.direction = "horizontal",        # Arrange legend items horizontally
legend.box = "horizontal"                # Use a horizontal legend box
)
)
# Print the customized combined plot
print(combined_plot)
# Customize the appearance of the combined plot
combined_plot <- (splithistogram2_plot + splitviolin2_plot + raincloudplot2_plot +
plot_layout(ncol = 3) +  # Set the number of columns
theme_minimal() +        # Use a minimal theme
theme(
plot.margin = margin(15, 15, 15, 15),  # Adjust overall margins
strip.text = element_text(size = 10),   # Adjust text size in facet labels
legend.position = "bottom",             # Move the legend to the bottom
legend.direction = "horizontal",        # Arrange legend items horizontally
legend.box = "horizontal"
axis.text.x = element_blank(),          #Removing the labels
# Customize the appearance of the combined plot
combined_plot <- (splithistogram2_plot + splitviolin2_plot + raincloudplot2_plot +
plot_layout(ncol = 3) +  # Set the number of columns
theme_minimal() +        # Use a minimal theme
theme(
plot.margin = margin(15, 15, 15, 15),  # Adjust overall margins
strip.text = element_text(size = 10),   # Adjust text size in facet labels
legend.position = "bottom",             # Move the legend to the bottom
legend.direction = "horizontal",        # Arrange legend items horizontally
legend.box = "horizontal" ,
axis.text.x = element_blank(),          # Remove x-axis labels
axis.text.y = element_blank() # Use a horizontal legend box
)
)
# Print the customized combined plot
print(combined_plot)
splithistogram2_plot <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white"),
axis.text.x = element_blank()) +  # Remove x-axis labels
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels) +
labs(fill = "Gender")
#Combining a plot (with +)
combined_plot <- splithistogram2_plot + splitviolin2_plot + raincloudplot2_plot
print(combined_plot)
splithistogram2_plot <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
axis.text.x = element_blank() +  # Remove x-axis label
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels) +
labs(fill = "Gender")
splithistogram2_plot <- splithistogram2_plot + theme(legend.position = "none")
# Customize the appearance of the combined plot
combined_plot <- (splithistogram2_plot + splitviolin2_plot + raincloudplot2_plot +
plot_layout(ncol = 3) +  # Set the number of columns
theme_minimal() +        # Use a minimal theme
theme(
plot.margin = margin(15, 15, 15, 15),  # Adjust overall margins
strip.text = element_text(size = 10),   # Adjust text size in facet labels
legend.position = "bottom",             # Move the legend to the bottom
legend.direction = "horizontal",        # Arrange legend items horizontally
legend.box = "horizontal" ,
axis.text.x = element_blank(),          # Remove x-axis labels
axis.text.y = element_blank() # Use a horizontal legend box
)
)
# Print the customized combined plot
print(combined_plot)
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
### Descriptive stats
# all self evluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# by gender
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |>
mutate(Subset = stringr::str_to_sentence(Subset)) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "AMP Evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
library("ggExtra")
library("ggplot2")
#creating a plot
plot1 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggMarginal(plot1, type = "histogram")
#Split them by gender and add regression line
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "pink") +  # Add regression line
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary")) +
theme(legend.position = c(.15, .7))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
#The regression line kinda shows a negative trend --> important to observe a first trend
library(ggrepel)
#Plot
Point_labels <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
set.seed(42)
p1 <- Point_labels + geom_text() + labs(title = "geom_text()")
p2 <- Point_labels + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
#R itself gives us a warning, that there are unlabeled data points and too many overlaps, so this plot is not really useful
#a way this plot is often used is to show the outliers or identify them, this is easily done by just putting the outlier variable or an order reporting the outliers directly in to the ggplot
# Load necessary libraries
library(ggplot2)
library(ggmagnify)
# Your original scatter plot
ggp <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1), alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
# Define the area to be magnified
# Adjust these values to the area you want to zoom in on
from <- c(xmin = 0.3, xmax = 0.8, ymin = 0.8, ymax = 1.3)
# Define where to place the magnified inset on the plot
# Adjust these values to place the inset where you like
to <- c(xmin = 0, xmax = 0.25, ymin = 4, ymax = 5)
# Add the magnified area to the plot
ggp + geom_magnify(from = from, to = to)
# In order tot check whether self report evaluations are correlated with the amp evaluations we remember the regression line above where we saw a slight negative trend We should test this statistically
result <- cor.test(data_processed_after_exclusions$mean_evaluation, data_processed_after_exclusions$AMP_score, method = "pearson")
# Print the test statistics and p-value
print(result)
#if we want the results specifically
result$p.value
result$estimate
#we see a negative correlation however it is not significant (p = .2435), also seen in confidence interval that includes 0 suggesting that there is no correlation in the data
# we can alos check for a spearman correlation test
result2 <- cor.test(data_processed_after_exclusions$mean_evaluation, data_processed_after_exclusions$AMP_score, method = "spearman")
result2$p.value
result2$estimate
#for the spearman it is almost identical (not surprisingly)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "pink") +  # Add regression line
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary")) +
theme(legend.position = c(.15, .7))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "pink") +  # Add regression line
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary")) +
theme(legend.position = c(.15, .7),
legend.box = "vertical")
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "pink") +  # Add regression line
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary")) +
theme(legend.position = c(.15, .7),
legend.box = "horizontal")
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "pink") +  # Add regression line
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary")) +
theme(legend.position = c(.15, .7),
legend.background = element_rect(color = "black", size = 0.5, linetype = "solid")))
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "pink") +  # Add regression line
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary")) +
theme(legend.position = c(.15, .7),
legend.background = element_rect(color = "black", size = 0.5, linetype = "solid"))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "pink") +  # Regression line
scale_colour_manual(name = "gender",
values = c("female" = "red", "male" = "blue", "non-binary" = "green")) +
theme(legend.position = c(.15, .7),
legend.background = element_rect(color = "black", size = 0.5, linetype = "solid"))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "pink") +  # Regression line
scale_colour_manual(name = "gender",
values = c("female" = "red", "male" = "blue", "nonbinary" = "green")) +
theme(legend.position = c(.15, .7),
legend.background = element_rect(color = "black", size = 0.5, linetype = "solid"))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(aes(color = gender), method = "lm", se = FALSE) +  # Regression line
scale_colour_manual(name = "gender",
values = c("female" = "red", "male" = "blue", "nonbinary" = "green")) +
theme(legend.position = c(.15, .7),
legend.background = element_rect(color = "black", size = 0.5, linetype = "solid"))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(aes(color = gender), method = "lm", se = FALSE) +  # Regression line by gender
scale_colour_manual(name = "gender",
values = c("female" = "DCE319FF", "male" = "blue", "nonbinary" = "green")) +
theme(legend.position = c(.15, .7),
legend.background = element_rect(color = "black", size = 0.5, linetype = "solid"))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
#Split them by gender and add regression line
library(scales)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(aes(color = gender), method = "lm", se = FALSE) +  # Regression line by gender
scale_colour_manual(name = "gender",
values = c("female" = "#73D055FF", "male" = "#404788FF", "nonbinary" = "#FDE725FF")) +
theme(legend.position = c(.15, .7),
legend.background = element_rect(color = "black", size = 0.5, linetype = "solid"))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(aes(color = gender), method = "lm", se = FALSE) +  # Regression line by gender
scale_colour_manual(name = "gender",
labels = c("female" = "Women", "male" = "Men", "nonbinary" = "Non-Binary"),
values = c("female" = "#73D055FF", "male" = "#404788FF", "nonbinary" = "#FDE725FF")) +
theme(legend.position = c(.15, .7),
legend.background = element_rect(color = "black", size = 0.5, linetype = "solid"))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(aes(color = gender), method = "lm", se = FALSE) +  # Regression line by gender
scale_colour_manual(name = "gender",
labels = c("female" = "Women", "male" = "Men", "nonbinary" = "Non-Binary"),
values = c("female" = "#73D055FF", "male" = "#404788FF", "nonbinary" = "#FDE725FF")) +
theme(legend.position = c(.15, .7),
legend.background = element_rect(color = "black", size = 0.5, linetype = "solid")) +
labs(x = "AMP_Score",
y = "Mean_Evaluation")
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(aes(color = gender), method = "lm", se = FALSE) +  # Regression line by gender
scale_colour_manual(name = "gender",
labels = c("female" = "Women", "male" = "Men", "nonbinary" = "Non-Binary"),
values = c("female" = "#73D055FF", "male" = "#404788FF", "nonbinary" = "#FDE725FF")) +
theme(legend.position = c(.15, .7),
legend.background = element_rect(color = "black", size = 0.5, linetype = "solid") ,
axis.title.x = element_text(vjust = -0.5),  # Adjust the vertical position of x-axis label
axis.title.y = element_text(hjust = 0.5)) +  # Adjust the horizontal position of y-axis label)
labs(x = "AMP_Score",
y = "Mean_Evaluation")
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(aes(color = gender), method = "lm", se = FALSE) +  # Regression line by gender
scale_colour_manual(name = "gender",
labels = c("female" = "Women", "male" = "Men", "nonbinary" = "Non-Binary"),
values = c("female" = "#73D055FF", "male" = "#404788FF", "nonbinary" = "#FDE725FF")) +
theme(legend.position = c(.15, .7),
legend.background = element_rect(color = "black", size = 0.5, linetype = "solid") ,
axis.title.x = element_text(vjust = -0.5),  # Adjust the vertical position of x-axis label
axis.title.y = element_text(hjust = -0.5)) +  # Adjust the horizontal position of y-axis label)
labs(x = "AMP_Score",
y = "Mean_Evaluation")
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point() +
geom_smooth(aes(color = gender), method = "lm", se = FALSE) +  # Regression line by gender
scale_colour_manual(name = "gender",
labels = c("female" = "Women", "male" = "Men", "nonbinary" = "Non-Binary"),
values = c("female" = "#73D055FF", "male" = "#404788FF", "nonbinary" = "#FDE725FF")) +
theme(legend.position = c(.15, .7),
legend.background = element_rect(color = "black", size = 0.5, linetype = "solid") ,
axis.title.x = element_text(vjust = 0.5),  # Adjust the vertical position of x-axis label
axis.title.y = element_text(hjust = 0.5)) +  # Adjust the horizontal position of y-axis label)
labs(x = "AMP_Score",
y = "Mean_Evaluation")
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = TRUE, groupFill = TRUE)

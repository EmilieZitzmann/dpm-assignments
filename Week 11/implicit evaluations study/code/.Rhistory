)
)
# Customize the appearance of the combined plot
combined_plot <- (
splithistogram2 + splitviolin2 + raincloudplot2 +
plot_layout(ncol = 3) +  # Set the number of columns
theme_minimal() +        # Use a minimal theme
theme(
plot.margin = margin(15, 15, 15, 15),  # Adjust overall margins
strip.text = element_text(size = 10),   # Adjust text size in facet labels
legend.position = "bottom",             # Move the legend to the bottom
legend.direction = "horizontal",        # Arrange legend items horizontally
legend.box = "horizontal"                # Use a horizontal legend box
)
)
# Print the customized combined plot
print(combined_plot)
ggsave("combined_plot.png", combined_plot, width = 15, height = 5, units = "in", dpi = 300)
# Customize the appearance of the combined plot
combined_plot <- (splithistogram2 + splitviolin2 + raincloudplot2 +
plot_layout(ncol = 3) +  # Set the number of columns
theme_minimal() +        # Use a minimal theme
theme(
plot.margin = margin(15, 15, 15, 15),  # Adjust overall margins
strip.text = element_text(size = 10),   # Adjust text size in facet labels
legend.position = "bottom",             # Move the legend to the bottom
legend.direction = "horizontal",        # Arrange legend items horizontally
legend.box = "horizontal"                # Use a horizontal legend box
)
)
# Print the customized combined plot
print(combined_plot)
# Print the customized combined plot
print(combined_plot)
#First we have to remove the legends from the plots
splithistogram2_plot <- splithistogram2 + theme(legend.position = "none")
splitviolin2_plot <- splitviolin2 + theme(legend.position = "none")
raincloudplot2_plot <- raincloudplot2 + theme(legend.position = "none")
# Customize the appearance of the combined plot
combined_plot <- (splithistogram2_plot + splitviolin2_plot + raincloudplot2_plot +
plot_layout(ncol = 3) +  # Set the number of columns
theme_minimal() +        # Use a minimal theme
theme(
plot.margin = margin(15, 15, 15, 15),  # Adjust overall margins
strip.text = element_text(size = 10),   # Adjust text size in facet labels
legend.position = "bottom",             # Move the legend to the bottom
legend.direction = "horizontal",        # Arrange legend items horizontally
legend.box = "horizontal"                # Use a horizontal legend box
)
)
# Print the customized combined plot
print(combined_plot)
ggsave("combined_plot.png", combined_plot, width = 15, height = 5, units = "in", dpi = 300)
ggsave("combined_plot.pdf", combined_plot, width = 15, height = 5, units = "in", dpi = 300)
#####split histogram
library(ggplot2)
library(hrbrthemes)  #really cool package for better themes
# I choose the theme ipsum (very clean there is a lot of different ones)
theme_set(theme_ipsum())
# Plotting
splithistogram <- ggplot(data_processed_after_exclusions, aes(x = mean_evaluation, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.5, color = "white", alpha = 0.8, size = 0.2) +
geom_vline(xintercept = seq(0, 6, by = 6), color = "black", size = 1) + #put in lines in order to  distinguish the plots if you don't they are all kinda squished together
facet_wrap(~ gender, scales = "free_x") +
xlab("Mean Evaluation") +
ylab("Frequency of Evaluation") +
labs(title = "Distribution of Mean Evaluation by Gender") +
scale_fill_manual(values = c("female" = "#FF9999", "male" = "#66B2FF", "nonbinary" = "#99FF99"), guide = FALSE) + #sometimes this does not work (--> if it does not set to NONE)
theme_minimal() +
theme(#This is for te legend bars (really practical for some things)
legend.position = "top",
legend.background = element_rect(fill = "white"),
strip.background = element_rect(fill = "lightgray", color = "white"),
strip.text = element_text(color = "black", size = 11),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 14, face = "bold"),
panel.spacing = unit(0.0, "lines")  #Here we can reduce the space between the bars
) +
theme(
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 14, face = "bold")
) +
scale_x_continuous(expand = c(0.05, 0.05)) + # Adjust the space on the x axis (both ends)
coord_cartesian(xlim = c(0, 6))  # Since we have a scale from 1-6 we can fix the scale for all to show from 1-6 in order to see the distribution
# Print the plot
print(splithistogram)
#With regard to the hypothesis we see a differing distribution which could lead to a significant hypothesis (men and women differing in their self reports)
##### Violin Plot
#Theme
theme_set(theme_ipsum_ps()) # choosing a different theme this time in order to experiment a bit
# Violin Plot
splitviolin <- ggplot(data_processed_after_exclusions, aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.7, color = "black") +
geom_boxplot(width = 0.1, fill = "white", color = "black", alpha = 0.7) +
xlab("Gender") +
ylab("Mean Evaluation") +
theme_minimal() +
theme(
legend.position = "top", #we put top instead of a vector since it is not pretty with the vector (see above how to do with a vector)
legend.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
plot.title = element_text(size = 16, face = "bold"),
panel.spacing = unit(0.0, "lines")) +
scale_fill_manual(values = c("female" = "#FF9999", "male" = "#66B2FF", "nonbinary" = "#99FF99")) +
coord_cartesian(ylim = c(0, 6))
# Print
print(splitviolin)
#The violin plot offers a bit more information on the distribution of the self evaluations. Since there are so little people having a nonbinary gender the wide distribution is not surprising. Whereas for men and women there is more to interpret --> The median is different and women have a less higher distribution also suggesting that the two genders might differ.
#####raincloud plot
library(ggplot2)
library(ggdist)#used for flat violin
library(hrbrthemes)
# Set the theme
theme_set(theme_ipsum())
raincloudplot <- ggplot(data_processed_after_exclusions, aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.5, color = "black") +
geom_point(aes(color = gender), position = position_jitter(width = 0.1), size = 2, alpha = 0.5) +
geom_boxplot(width = 0.1, fill = "white", color = "black", alpha = 0.7) +
labs(x = "Gender", y = "Mean Evaluation") +
theme_minimal() +
theme(
legend.position = "top",  # Adjust legend position to the top
legend.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 14, face = "bold"))
# Print the plot
print(raincloudplot)
#The raincloud plot suggests the same as above with women having some outliers where men still have distribution in violin plot. The overall plotting suggests that the hypothesis is supported.
#T-Test to check for possible differences
#Create one dataset for male and female
data_male <- subset(data_processed_after_exclusions, gender == "male")
data_female <- subset(data_processed_after_exclusions, gender == "female")
#doing a T-Test with the mean_evaluation self reports
t_test_result <- t.test(mean_evaluation ~ gender, data = rbind(data_male, data_female))
#Printing the results in order to see whether it is significant or not:
print(t_test_result)
library(report)
report_table(t_test_result)
report_effectsize(t_test_result)
report_text(t_test_result)
#If a T-Test is not possible (this is the case when there is more than two independent groups) we can conduct a Kruskal_Wallis-Test. If we would like to include all genders (not only men and women), a Kruskal test is appropriate.
kruskal_result <- kruskal.test(mean_evaluation ~ gender, data = data_processed_after_exclusions)
# Print the result
print(kruskal_result)
#Similarly, the Kruskal-Wallis test confirms the previously indicated significance. Likewise the p-value is clearly below 0.5 (p= 0.0037) and thus indicates a significant difference with regard to the self-reported average evaluation in men, women and non-binary individuals.
#####Split Histogram
#vary the labeling and order of the legend
# We can define custom labels and vary their order so the legend shows different things
custom_labels <- c( "Women", "Non-binary", "Men") # here we can vary the names and order within the legend
custom_order <- c("female", "nonbinary", "male" ) #with this we can adjust the custom order
#ATTENTION: The order of the custom labels and order has to be the same otherwhise the legend and the order is not matched
#In order to be able to reorder them we have to change the factor since otherwhise there is absolutely nothing happening
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender,
levels = custom_order)
#we can then easily insert them into our splithistogram like that
splithistogram2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels) +
labs(fill = "Gender")  # We could also capitalize the header (title) of the legend
# Print the plot
print(splithistogram2)
#As we can see the legend is changed now with all things being capitalized --> in order to change them again we can adjust the vector
#####Split violin plot
#change the order of the violin plot (same as above) --> it is the same custom labels and order if we would like different ones we would have to name them differently in order to not get things mixed up
custom_labels <- c( "Women", "Non-binary", "Men")
custom_order <- c("female", "nonbinary", "male" )
# Reorder the level
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender,
levels = custom_order)
# Split violin with the legend being modified
splitviolin2 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.7, color = "black") +
geom_boxplot(width = 0.1, fill = "white", color = "black", alpha = 0.7) +
facet_wrap(~gender, scales = "free_x") +
xlab("Gender") +
ylab("AMP Score") +
theme_minimal() +
theme(legend.position = c(0.5, 0.2), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels,
breaks = custom_order)
# Print the plot
print(splitviolin2)
##### Raincloud plot
#We are again taking our same labels as above ( we do not have to read them in all of the time but it is better to have an intersubjective view of what happened)
custom_labels <- c( "Women", "Non-binary", "Men")
custom_order <- c("female", "nonbinary", "male" )
#reorder the levels (again same thing as previously done)
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender,
levels = custom_order)
#Create the plot
raincloudplot2 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(trim = FALSE, scale = "area", adjust = 1.5, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.5) +
geom_quasirandom(aes(color = gender, fill = gender), size = 2, alpha = 0.5, show.legend = FALSE) +
scale_color_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),  #we adjust the colours because otherwise the points and plots do not match
labels = custom_labels,
breaks = custom_order) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels,
breaks = custom_order) +
labs(x = "Gender", y = "AMP Score") +
theme_minimal() +
theme(legend.position = c(0.51, 0.2), legend.background = element_rect(fill = "white"))
# Print the plot
print(raincloudplot2)
#Create the plot
raincloudplot2 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(trim = FALSE, scale = "area", adjust = 1.5, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.5) +
scale_color_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),  #we adjust the colours because otherwise the points and plots do not match
labels = custom_labels,
breaks = custom_order) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels,
breaks = custom_order) +
labs(x = "Gender", y = "AMP Score") +
theme_minimal() +
theme(legend.position = c(0.51, 0.2), legend.background = element_rect(fill = "white"))
# Print the plot
print(raincloudplot2)
#####Split Histogram
#vary the labeling and order of the legend
# We can define custom labels and vary their order so the legend shows different things
custom_labels <- c( "Women", "Non-binary", "Men") # here we can vary the names and order within the legend
custom_order <- c("female", "nonbinary", "male" ) #with this we can adjust the custom order
#ATTENTION: The order of the custom labels and order has to be the same otherwhise the legend and the order is not matched
#In order to be able to reorder them we have to change the factor since otherwhise there is absolutely nothing happening
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender,
levels = custom_order)
#we can then easily insert them into our splithistogram like that
splithistogram2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels) +
labs(fill = "Gender")  # We could also capitalize the header (title) of the legend
# Print the plot
print(splithistogram2)
#As we can see the legend is changed now with all things being capitalized --> in order to change them again we can adjust the vector
#####Split violin plot
#change the order of the violin plot (same as above) --> it is the same custom labels and order if we would like different ones we would have to name them differently in order to not get things mixed up
custom_labels <- c( "Women", "Non-binary", "Men")
custom_order <- c("female", "nonbinary", "male" )
# Reorder the level
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender,
levels = custom_order)
# Split violin with the legend being modified
splitviolin2 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.7, color = "black") +
geom_boxplot(width = 0.1, fill = "white", color = "black", alpha = 0.7) +
facet_wrap(~gender, scales = "free_x") +
xlab("Gender") +
ylab("AMP Score") +
theme_minimal() +
theme(legend.position = c(0.5, 0.2), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels,
breaks = custom_order)
# Print the plot
print(splitviolin2)
##### Raincloud plot
#We are again taking our same labels as above ( we do not have to read them in all of the time but it is better to have an intersubjective view of what happened)
custom_labels <- c( "Women", "Non-binary", "Men")
custom_order <- c("female", "nonbinary", "male" )
#reorder the levels (again same thing as previously done)
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender,
levels = custom_order)
#Create the plot
raincloudplot2 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(trim = FALSE, scale = "area", adjust = 1.5, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.5) +
scale_color_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),  #we adjust the colours because otherwise the points and plots do not match
labels = custom_labels,
breaks = custom_order) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels,
breaks = custom_order) +
labs(x = "Gender", y = "AMP Score") +
theme_minimal() +
theme(legend.position = c(0.51, 0.2), legend.background = element_rect(fill = "white"))
# Print the plot
print(raincloudplot2)
##### Raincloud plot
library(ggbeeswarm)
#Create the plot
raincloudplot2 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(trim = FALSE, scale = "area", adjust = 1.5, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.5) +
geom_quasirandom(aes(color = gender, fill = gender), size = 2, alpha = 0.5, show.legend = FALSE) +
scale_color_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),  #we adjust the colours because otherwise the points and plots do not match
labels = custom_labels,
breaks = custom_order) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels,
breaks = custom_order) +
labs(x = "Gender", y = "AMP Score") +
theme_minimal() +
theme(legend.position = c(0.51, 0.2), legend.background = element_rect(fill = "white"))
# Print the plot
print(raincloudplot2)
#t test
AMP_t_test_result <- t.test(AMP_score ~ gender, data = data_p_e_without_nb)
print(AMP_t_test_result)
report_table(AMP_t_test_result)
report_effectsize(AMP_t_test_result)
report_text(AMP_t_test_result)
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
#t test
AMP_t_test_result <- t.test(AMP_score ~ gender, data = data_t_test)
data_tests <- rbind(data_male, data_female)
AMP_t_test_result <- t.test(AMP_score ~ gender, data = data_tests)
print(AMP_t_test_result)
report_table(AMP_t_test_result)
report_effectsize(AMP_t_test_result)
report_text(AMP_t_test_result)
sessionInfo()
#####Split Histogram
#vary the labeling and order of the legend
# We can define custom labels and vary their order so the legend shows different things
custom_labels <- c( "Women", "Non-binary", "Men") # here we can vary the names and order within the legend
custom_order <- c("female", "nonbinary", "male" ) #with this we can adjust the custom order
#In order to be able to reorder them we have to change the factor since otherwhise there is absolutely nothing happening
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender,
levels = custom_order)
#we can then easily insert them into our splithistogram like that
splithistogram2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels) +
labs(fill = "Gender")  # We could also capitalize the header (title) of the legend
# Print the plot
print(splithistogram2)
#####Split violin plot
#change the order of the violin plot (same as above) --> it is the same custom labels and order if we would like different ones we would have to name them differently in order to not get things mixed up
custom_labels <- c( "Women", "Non-binary", "Men")
custom_order <- c("female", "nonbinary", "male" )
# Reorder the level
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender,
levels = custom_order)
# Split violin with the legend being modified
splitviolin2 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.7, color = "black") +
geom_boxplot(width = 0.1, fill = "white", color = "black", alpha = 0.7) +
facet_wrap(~gender, scales = "free_x") +
xlab("Gender") +
ylab("AMP Score") +
theme_minimal() +
theme(legend.position = c(0.5, 0.2), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels,
breaks = custom_order)
# Print the plot
print(splitviolin2)
##### Raincloud plot
library(ggbeeswarm)
#We are again taking our same labels as above ( we do not have to read them in all of the time but it is better to have an intersubjective view of what happened)
custom_labels <- c( "Women", "Non-binary", "Men")
#reorder the levels (again same thing as previously done)
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender,
levels = custom_order)
#Create the plot
raincloudplot2 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(trim = FALSE, scale = "area", adjust = 1.5, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.5) +
geom_quasirandom(aes(color = gender, fill = gender), size = 2, alpha = 0.5, show.legend = FALSE) +
scale_color_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),  #we adjust the colours because otherwise the points and plots do not match
labels = custom_labels,
breaks = custom_order) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels,
breaks = custom_order) +
labs(x = "Gender", y = "AMP Score") +
theme_minimal() +
theme(legend.position = c(0.51, 0.2), legend.background = element_rect(fill = "white"))
# Print the plot
print(raincloudplot2)
#Create the plot
raincloudplot2 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(trim = FALSE, scale = "area", adjust = 1.5, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.5) +
geom_quasirandom(aes(color = gender, fill = gender), size = 2, alpha = 0.5, show.legend = FALSE) +
scale_x_continuous(labels = custom_labels)+
scale_color_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),  #we adjust the colours because otherwise the points and plots do not match
labels = custom_labels,
breaks = custom_order) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels,
breaks = custom_order) +
labs(x = "Gender", y = "AMP Score") +
theme_minimal() +
theme(legend.position = c(0.51, 0.2), legend.background = element_rect(fill = "white"))
# Print the plot
print(raincloudplot2)
#Create the plot
raincloudplot2 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(trim = FALSE, scale = "area", adjust = 1.5, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.5) +
geom_quasirandom(aes(color = gender, fill = gender), size = 2, alpha = 0.5, show.legend = FALSE) +
scale_color_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),  #we adjust the colours because otherwise the points and plots do not match
labels = custom_labels,
breaks = custom_order) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels,
breaks = custom_order) +
labs(x = "Gender", y = "AMP Score") +
theme_minimal() +
theme(legend.position = c(0.51, 0.2), legend.background = element_rect(fill = "white"))
# Print the plot
print(raincloudplot2)
#Create the plot
raincloudplot2 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(trim = FALSE, scale = "area", adjust = 1.5, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.5) +
geom_quasirandom(aes(color = gender, fill = gender), size = 2, alpha = 0.5, show.legend = FALSE) +
scale_x_discrete(labels = custom_labels) +
scale_color_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),  #we adjust the colours because otherwise the points and plots do not match
labels = custom_labels,
breaks = custom_order) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels,
breaks = custom_order) +
labs(x = "Gender", y = "AMP Score") +
theme_minimal() +
theme(legend.position = c(0.51, 0.2), legend.background = element_rect(fill = "white"))
#Create the plot
raincloudplot2 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(trim = FALSE, scale = "area", adjust = 1.5, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.5) +
geom_quasirandom(aes(color = gender, fill = gender), size = 2, alpha = 0.5, show.legend = FALSE) +
scale_x_discrete(labels = custom_labels) +
scale_color_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),  #we adjust the colours because otherwise the points and plots do not match
labels = custom_labels,
breaks = custom_order) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels,
breaks = custom_order) +
labs(x = "Gender", y = "AMP Score") +
theme_minimal() +
theme(legend.position = c(0.51, 0.2), legend.background = element_rect(fill = "white"))
# Print the plot
print(raincloudplot2)
View(data_processed_after_exclusions)
library(psych)
install.packages("psych")
library(psych)
library(psych)
alpha(subset(data_processed_after_exclusions, select = c(like, positive, prefer)), check.keys =TRUE)#check keys just does change the inverted items (we do not have them)
alpha(subset(data_processed_after_exclusions, select = c(like, positive, prefer)), check.keys =F)#check keys just does change the inverted items (we do not have them)
alpha(subset(data_processed_after_exclusions, select = c(like, positive, prefer)), check.keys = T)#check keys just does change the inverted items (we do not have them)
Alpha <- alpha(subset(data_processed_after_exclusions, select = c(like, positive, prefer)), check.keys = T)#check keys just does change the inverted items (we do not have them)
report_text(Alpha)
alpha(subset(data_processed_after_exclusions, select = c(like, positive, prefer)), check.keys = T)#check keys just does change the inverted items (we do not have them)

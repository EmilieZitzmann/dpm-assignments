xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
#creating a plot
plot1 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggMarginal(plot1, type = "histogram")
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point () +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = T, groupFill = T)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
#Plot
Point_labels <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
set.seed(42)
p1 <- Point_labels + geom_text() + labs(title = "geom_text()")
p2 <- Point_labels + geom_text_repel() + labs(title = "geom_text_repel()")
library(ggrepel)
#Plot
Point_labels <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
set.seed(42)
p1 <- Point_labels + geom_text() + labs(title = "geom_text()")
p2 <- Point_labels + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
##colors
colors <- viridis_pal(begin = 0.0, end = 1.0, option = "mako")(10)
colors
show_col(colors)
p1 <- Point_labels + geom_text() + labs(title = "geom_text()")
p2 <- Point_labels + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
#Plot
Point_labels <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
set.seed(42)
p1 <- Point_labels + geom_text() + labs(title = "geom_text()")
p2 <- Point_labels + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
library(ggplot2)
library(ggmagnify)
library(ggmagnify)
library(ggMagnify)
remotes::install_github("hughjonesd/ggmagnify")
library(ggmagnify)
Magnify <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))+ xlim(c(1.5, 6))
Magnify + geom_magnify(from = c(.45, .065, 1, 1.5), to = c(.25, .75, 3, 5),
shadow = TRUE)
remotes::install_github("hughjonesd/ggmagnify")
library(ggplot2)
library(ggmagnify)
Magnify <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))+ xlim(c(1.5, 6))
Magnify + geom_magnify(from = c(.45, .065, 1, 1.5), to = c(.25, .75, 3, 5),
shadow = TRUE)
Magnify <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))+ xlim(c(1.5, 6))
Magnify + geom_magnify(from = c(.45, .065, 1, 1.5), to = c(.25, .75, 3, 5),
shadow = TRUE)
Magnify <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))+ xlim(c(1.5, 6))
Magnify
Magnify <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))+ xlim(c(1.5, 6))
Magnify + geom_magnify(from = c(.45, .065, 1, 1.5), to = c(.25, .75, 3, 5),
shadow = F)
Magnify <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary")) +
xlim(c(1.5, 6)) +
geom_magnify(aes(x = AMP_score, y = mean_evaluation),
from = c(1, 1.5), to = c(3, 5),
shadow = TRUE)
# Print the plot
print(Magnify)
Point_labels +
geom_magnify(aes(x = AMP_score, y = mean_evaluation),
from = c(1, 1.5), to = c(3, 5),
shadow = TRUE)
# Print the plot
print(Magnify)
from <- c(xmin =0.75,xmax = 1, ymin = 1, ymax = 1.2)
to <- c(0.25,0.75, 2,3)
Point_labels + geom_magnify(from = from, to = to)
Point_labels + geom_magnify(from = from, to = to,
fill = c("blue", "green"),
outline = c("red", "orange"))
from <- c(xmin =0.75,xmax = 1, ymin = 1, ymax = 1.2)
to <- c(0.25,0.75, 2,3)
# Add shaded rectangles with desired colors
Point_labels +
geom_rect(aes(xmin = from["xmin"], xmax = from["xmax"], ymin = from["ymin"], ymax = from["ymax"]),
fill = "blue", alpha = 0.3) +
geom_rect(aes(xmin = to["xmin"], xmax = to["xmax"], ymin = to["ymin"], ymax = to["ymax"]),
fill = "green", alpha = 0.3) +
geom_magnify(from = from, to = to)
Point_labels + geom_magnify(from = from, to = to)
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
#creating a plot
plot1 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggMarginal(plot1, type = "histogram")
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point () +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = T, groupFill = T)
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
#creating a plot
plot1 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggMarginal(plot1, type = "histogram")
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point () +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = T, groupFill = T)
#creating a plot
plot1 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggMarginal(plot1, type = "histogram")
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point () +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = T, groupFill = T)
#Plot
Point_labels <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
set.seed(42)
p1 <- Point_labels + geom_text() + labs(title = "geom_text()")
p2 <- Point_labels + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
# Your original scatter plot
ggp <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1), alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
# Define the area to be magnified
# Adjust these values to the area you want to zoom in on
from <- c(xmin = 0.3, xmax = 0.8, ymin = 0.8, ymax = 1.3)
# Define where to place the magnified inset on the plot
# Adjust these values to place the inset where you like
to <- c(xmin = 0, xmax = 0.25, ymin = 4, ymax = 5)
# Add the magnified area to the plot
ggp + geom_magnify(from = from, to = to)
#####split histogram
# Create the base plot
splithistogramv1 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal()
# Print the plot
print(splithistogramv1)
# Create the split violin plot
splitviolinv1 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(scale = "area", trim = FALSE) + # Violin plot
geom_boxplot(width = 0.1, fill = "white") + # Add a boxplot inside the violin
facet_wrap(~gender, scales = "free_x") + # Splitting by gender
xlab("Gender") +
ylab("AMP Score") +
theme_minimal()
# Print the plot
print(splitviolinv1)
# Load necessary libraries
library(ggplot2)
library(ggbeeswarm) # for geom_quasirandom
install.packages("ggbeeswarm")
library(ggbeeswarm) # for geom_quasirandom
# Create the raincloud plot
raincloudplotv1 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
# Add a half violin plot
geom_violin(trim = FALSE, scale = "area", adjust = 1.5, alpha = 0.5) +
# Add the boxplot
geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.5) +
# Add points
geom_quasirandom(aes(color = gender), size = 2, alpha = 0.5, show.legend = FALSE) +
# Customizations
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
labs(x = "Gender", y = "AMP Score") +
theme_minimal()
# Print the plot
print(raincloudplotv1)
#creating a plot
plot1 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggMarginal(plot1, type = "histogram")
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point () +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = T, groupFill = T)
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point () +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary")) +
theme(legend.position = c(.15, .7))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = T, groupFill = T)
#Plot
Point_labels <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
set.seed(42)
p1 <- Point_labels + geom_text() + labs(title = "geom_text()")
p2 <- Point_labels + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
# Load necessary libraries
library(ggplot2)
library(ggmagnify)
# Your original scatter plot
ggp <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1), alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
# Define the area to be magnified
# Adjust these values to the area you want to zoom in on
from <- c(xmin = 0.3, xmax = 0.8, ymin = 0.8, ymax = 1.3)
# Define where to place the magnified inset on the plot
# Adjust these values to place the inset where you like
to <- c(xmin = 0, xmax = 0.25, ymin = 4, ymax = 5)
# Add the magnified area to the plot
ggp + geom_magnify(from = from, to = to)
#####split histogram
# Create the base plot
splithistogramv1 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal()
# Print the plot
print(splithistogramv1)
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# by gender
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |>
mutate(Subset = stringr::str_to_sentence(Subset)) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# by gender
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |>
mutate(Subset = stringr::str_to_sentence(Subset)) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
# combine
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |>
mutate(Subset = stringr::str_to_sentence(Subset)) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "AMP_Evaluation" = 3)) |>
kable_classic(full_width = FALSE)
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# by gender
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |>
mutate(Subset = stringr::str_to_sentence(Subset)) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "AMP Evaluations" = 3)) |>
kable_classic(full_width = FALSE)

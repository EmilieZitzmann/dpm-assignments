mutate(age = as.numeric(age)) %>%
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) %>%
mutate_all(.funs = janitor::round_half_up, digits = 1) %>%
kable() %>%
add_header_above(header = c("Age" = 2)) %>%
kable_classic(full_width = FALSE)
data_processed_after_exclusions %>%
rename(Gender = gender) %>%
group_by(Gender) %>%
summarise(n = n()) %>%
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) %>%
mutate(Gender = stringr::str_to_sentence(Gender)) %>%  # Change the case of the Gender variable so that it prints nicely
kable() %>%
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions %>%
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) %>%
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions %>%
group_by(group = gender) %>%
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions %>%
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) %>%
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions %>%
group_by(group = gender) %>%
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) %>%
select(Subset = group, Mean, SD, n) %>%  # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) %>%  # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) %>%
kable() %>%
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) %>%
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
install.packages("ggExtra")
install.packages("ggExtra")
install.packages("devtools")
devtools::install_github("daattali/ggExtra")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library("ggExtra")
library("ggplot2")
set.seed(30)
df1 <- data.frame(x = rnorm(500, 50, 10), y = runif(500, 0, 50))
p1 <- ggplot(df1, aes(x, y)) + geom_point() + theme_bw()
p1
set.seed(30)
df1 <- data_processed_after_exclusions(x = rnorm(500, 50, 10), y = runif(500, 0, 50))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed <- dplyr::read_csv("../data/processed/data_processed.csv")
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed %>%
filter(exclude_participant == "include")
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed %>%
filter(exclude_participant == "include")
data_processed %>%
count(name = "n") %>%
kable() %>%
add_header_above(header = c("Whole sample" = 1)) %>%  # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions %>%
count(name = "n") %>%
kable() %>%
add_header_above(header = c("For analysis" = 1)) %>%
kable_classic(full_width = FALSE)
data_processed_after_exclusions %>%
mutate(age = as.numeric(age)) %>%
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) %>%
mutate_all(.funs = janitor::round_half_up, digits = 1) %>%
kable() %>%
add_header_above(header = c("Age" = 2)) %>%
kable_classic(full_width = FALSE)
data_processed_after_exclusions %>%
rename(Gender = gender) %>%
group_by(Gender) %>%
summarise(n = n()) %>%
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) %>%
mutate(Gender = stringr::str_to_sentence(Gender)) %>%  # Change the case of the Gender variable so that it prints nicely
kable() %>%
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions %>%
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) %>%
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions %>%
group_by(group = gender) %>%
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) %>%
select(Subset = group, Mean, SD, n) %>%  # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) %>%  # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) %>%
kable() %>%
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) %>%
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
library("ggExtra")
library("ggplot2")
set.seed(30)
df1 <- data_processed_after_exclusions(x = rnorm(500, 50, 10), y = runif(500, 0, 50))
#creating a plot
plot1 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggMarginal(plot1, type = "histogram")
#creating a plot
plot1 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggMarginal(plot1, type = "histogram")
#creating a plot
plot1 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggMarginal(plot1, type = "histogram")
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_pint () +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point () +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
ggMarginal(Axial_histogram_gender, type = "histogram")
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = T, groupFill = T)
library(ggrepel)
View(data_processed_after_exclusions)
#Plot
Point_labels <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
set.seed(42)
p1 <- Point_labels + geom_text() + labs(title = "geom_text()")
p2 <- Point_labels + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
#Plot
Point_labels <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (size = 3, color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
set.seed(42)
p1 <- Point_labels + geom_text() + labs(title = "geom_text()")
p2 <- Point_labels + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
#Plot
Point_labels <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (size = 2, color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
p1 <- Point_labels + geom_text() + labs(title = "geom_text()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
gridExtra::grid.arrange(p1, p2, ncol = 2)
#Plot
Point_labels <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (size = .5, color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
set.seed(42)
p1 <- Point_labels + geom_text() + labs(title = "geom_text()")
p2 <- Point_labels + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
#Plot
Point_labels <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
set.seed(42)
p1 <- Point_labels + geom_text() + labs(title = "geom_text()")
p2 <- Point_labels + geom_text_repel() + labs(title = "geom_text_repel()")
gridExtra::grid.arrange(p1, p2, ncol = 2)
# install.packages("remotes")
remotes::install_github("hughjonesd/ggmagnify")
Magnify <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))+ xlim(c(1.5, 6))
Magnify <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary")) +
coord_cartesian(xlim = c(1.5, 6), ylim = c(min(mean_evaluation), max(mean_evaluation))) +
labs(title = "Zoomed In Plot")
Magnify <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary")) +
coord_cartesian(xlim = c(1.5, 6), ylim = c(min("mean_evaluation"), max("mean_evaluation"))) +
labs(title = "Zoomed In Plot")
print(Magnify)
Magnify
Magnify <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))+ xlim(c(1.5, 6))
Magnify + geom_magnify(from = c(.45, .065), to = c(.25, .75),
shadow = TRUE)
Magnify + geom_magnify(from = c(.45, .065, 1, 1.5), to = c(.25, .75, 3, 5),
shadow = TRUE)
library(ggmagnify)
library(ggplot2)
library(ggmagnify)
# install.packages("remotes")
remotes::install_github("hughjonesd/ggmagnify")
library(ggplot2)
library(ggmagnify)
Magnify <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point (color = "red") +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))+ xlim(c(1.5, 6))
Magnify + geom_magnify(from = c(.45, .065, 1, 1.5), to = c(.25, .75, 3, 5),
shadow = TRUE)
library(ggmagnify)
install.packages("ggmagnify", repos = c("https://hughjonesd.r-universe.dev",
"https://cloud.r-project.org"))
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed %>%
filter(exclude_participant == "include")
data_processed %>%
count(name = "n") %>%
kable() %>%
add_header_above(header = c("Whole sample" = 1)) %>%  # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions %>%
count(name = "n") %>%
kable() %>%
add_header_above(header = c("For analysis" = 1)) %>%
kable_classic(full_width = FALSE)
data_processed_after_exclusions %>%
mutate(age = as.numeric(age)) %>%
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) %>%
mutate_all(.funs = janitor::round_half_up, digits = 1) %>%
kable() %>%
add_header_above(header = c("Age" = 2)) %>%
kable_classic(full_width = FALSE)
data_processed_after_exclusions %>%
rename(Gender = gender) %>%
group_by(Gender) %>%
summarise(n = n()) %>%
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) %>%
mutate(Gender = stringr::str_to_sentence(Gender)) %>%  # Change the case of the Gender variable so that it prints nicely
kable() %>%
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions %>%
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) %>%
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions %>%
group_by(group = gender) %>%
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) %>%
select(Subset = group, Mean, SD, n) %>%  # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) %>%  # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) %>%
kable() %>%
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) %>%
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
library("ggExtra")
library("ggplot2")
#creating a plot
plot1 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggMarginal(plot1, type = "histogram")
#Split them by gender
Axial_histogram_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_point () +
scale_colour_discrete(name = "gender",
labels = c("female", "male", "non-binary"))
ggMarginal(Axial_histogram_gender, type = "histogram", groupColour = T, groupFill = T)
p <- ggplot(dat, aes(wt, mpg, label = car)) +
geom_point(color = "red")

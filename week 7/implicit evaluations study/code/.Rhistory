# trial level data
data_selfreport_trial_level <- data_selfreport_raw %>%
select(subject, trialcode, response) %>%
filter(trialcode %in% c("like", "prefer", "positive")) %>%
rename(item = trialcode) %>%
filter(response != "Ctrl+'B'") %>%
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level %>%
group_by(subject) %>%
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level %>%
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
#The AMP was scored in the usual manner. Each participant’s score represented the proportion of prime-congruent ratings (i.e., positive primes that were rated positively, ie “1”; and negative primes that were rated negatively, ie “0), using only trials from the test blocks.
data_correct_trials <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
select(subject, trialcode, correct) %>%
mutate(prime_congruency = case_when((trialcode == "prime_positive" &
correct == 1 ) |
(trialcode == "prime_negative" &
correct == 0)~ "congruent",
TRUE ~"incongruent"))
#figure out sanity checks that this is true --> up to three solutions (one is before summarize insert something)
View(data_correct_trials)
#The AMP was scored in the usual manner. Each participant’s score represented the proportion of prime-congruent ratings (i.e., positive primes that were rated positively, ie “1”; and negative primes that were rated negatively, ie “0), using only trials from the test blocks.
data_correct_trials <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
select(subject, trialcode, correct) %>%
mutate(prime_congruency = case_when((trialcode == "prime_positive" &
correct == 1 ) |
(trialcode == "prime_negative" &
correct == 0)~ "congruent",
TRUE ~"incongruent")) %>%
data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = sum(prime_congruency == "congruent"))
#The AMP was scored in the usual manner. Each participant’s score represented the proportion of prime-congruent ratings (i.e., positive primes that were rated positively, ie “1”; and negative primes that were rated negatively, ie “0), using only trials from the test blocks.
data_correct_trials <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
select(subject, trialcode, correct) %>%
mutate(prime_congruency = case_when((trialcode == "prime_positive" &
correct == 1 ) |
(trialcode == "prime_negative" &
correct == 0)~ "congruent",
TRUE ~"incongruent")) %>%
data_correct_trials <-group_by(subject) %>%
summarize(amp_score = sum(prime_congruency == "congruent"))
#The AMP was scored in the usual manner. Each participant’s score represented the proportion of prime-congruent ratings (i.e., positive primes that were rated positively, ie “1”; and negative primes that were rated negatively, ie “0), using only trials from the test blocks.
data_correct_trials <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
select(subject, trialcode, correct) %>%
mutate(prime_congruency = case_when((trialcode == "prime_positive" &
correct == 1 ) |
(trialcode == "prime_negative" &
correct == 0)~ "congruent",
TRUE ~"incongruent")) %>%
data_correct_trials <-group_by(subject) %>%
summarize(amp_score = sum(prime_congruency == "congruent"))
#The AMP was scored in the usual manner. Each participant’s score represented the proportion of prime-congruent ratings (i.e., positive primes that were rated positively, ie “1”; and negative primes that were rated negatively, ie “0), using only trials from the test blocks.
data_correct_trials <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
select(subject, trialcode, correct) %>%
mutate(prime_congruency = case_when((trialcode == "prime_positive" &
correct == 1 ) |
(trialcode == "prime_negative" &
correct == 0)~ "congruent",
TRUE ~"incongruent")) %>%
#Figure out the amp Score Variable (called amp_score)
#figure out sanity checks that this is true --> up to three solutions (one is before summarize insert something)
```
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") %>%
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") %>%
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") %>%
janitor::clean_names()
dat_age_gender <- data_demographics_raw %>%
select(subject, date, time, trialcode, response) %>%
pivot_wider(names_from = trialcode,
values_from = response) %>%
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
# determine modal number of trials
data_amp_completeness <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
group_by(subject) %>%
count() %>%
ungroup() %>%
mutate(exclude_amp_completeness = ifelse(n == 72, "include", "exclude")) %>%
select(-n)
# data_amp_completeness |>
#   count(n)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw %>%
select(subject, trialcode, response) %>%
filter(trialcode %in% c("like", "prefer", "positive")) %>%
rename(item = trialcode) %>%
filter(response != "Ctrl+'B'") %>%
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level %>%
group_by(subject) %>%
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level %>%
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
#The AMP was scored in the usual manner. Each participant’s score represented the proportion of prime-congruent ratings (i.e., positive primes that were rated positively, ie “1”; and negative primes that were rated negatively, ie “0), using only trials from the test blocks.
data_correct_trials <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
select(subject, trialcode, correct) %>%
mutate(prime_congruency = case_when((trialcode == "prime_positive" &
correct == 1 ) |
(trialcode == "prime_negative" &
correct == 0)~ "congruent",
TRUE ~"incongruent")) %>%
#Figure out the amp Score Variable (called amp_score)
#figure out sanity checks that this is true --> up to three solutions (one is before summarize insert something)
#The AMP was scored in the usual manner. Each participant’s score represented the proportion of prime-congruent ratings (i.e., positive primes that were rated positively, ie “1”; and negative primes that were rated negatively, ie “0), using only trials from the test blocks.
data_correct_trials <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
select(subject, trialcode, correct) %>%
mutate(prime_congruency = case_when((trialcode == "prime_positive" &
correct == 1 ) |
(trialcode == "prime_negative" &
correct == 0)~ "congruent",
TRUE ~"incongruent"))
data_correct_trials <-group_by(subject) %>%
summarize(amp_score = sum(prime_congruency == "congruent"))
data_correct_trials %>%
group_by(subject) %>%
(amp_score = sum(prime_congruency == "congruent"))
data_correct_trials %>%
group_by(subject) %>%
(amp_score = sum(prime_congruency == "congruent"))
data_prop_corrrect <- data_correct_trials %>%
group_by(subject) %>%
(amp_score = sum(prime_congruency == "congruent"))
#The AMP was scored in the usual manner. Each participant’s score represented the proportion of prime-congruent ratings (i.e., positive primes that were rated positively, ie “1”; and negative primes that were rated negatively, ie “0), using only trials from the test blocks.
data_correct_trials <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
select(subject, trialcode, correct) %>%
mutate(prime_congruency = case_when((trialcode == "prime_positive" &
correct == 1 ) |
(trialcode == "prime_negative" &
correct == 0)~ "congruent",
TRUE ~"incongruent"))
data_prop_corrrect <- data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = sum(prime_congruency == "congruent"))
View(data_prop_corrrect)
data_prop_test <- data_correct_trials %>%
select("prime_congruency") %>%
na.omit(T) %>%
tabyl(prime_congruency) %>%
adorn_pct_formatting(digits = 2)
View(data_prop_test)
data_prop_corrrect <- data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "congruent"))
data_san_check_1 <- data_correct_trials %>%
select("prime_congruency") %>%
na.omit(T) %>%
tabyl(prime_congruency) %>%
adorn_pct_formatting(digits = 2)
data_prop_incorrect <- data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "incongruent"))
sanity_check_1 <- data_prop_correct %>%
full_join(data_prop_incorrect,by="subject") %>%
mutate(check1 = amp_score.x + amp_score.y)
data_prop_corrrect <- data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "congruent"))
sanity_check_1 <- data_prop_correct %>%
full_join(data_prop_incorrect,by="subject") %>%
mutate(check1 = amp_score.x + amp_score.y)
data_prop_correct <- data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "congruent"))
data_prob_correct <- data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "congruent"))
#The AMP was scored in the usual manner. Each participant’s score represented the proportion of prime-congruent ratings (i.e., positive primes that were rated positively, ie “1”; and negative primes that were rated negatively, ie “0), using only trials from the test blocks.
data_correct_trials <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
select(subject, trialcode, correct) %>%
mutate(prime_congruency = case_when((trialcode == "prime_positive" &
correct == 1 ) |
(trialcode == "prime_negative" &
correct == 0)~ "congruent",
TRUE ~"incongruent"))
data_prob_correct <- data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "congruent"))
#First we check the overall percentage and if the congruent and incongruent trials sum up to 1 --> this is the case (Note that you need janitor:: for tably function)
data_san_check_1 <- data_correct_trials %>%
select("prime_congruency") %>%
na.omit(T) %>%
tabyl(prime_congruency) %>%
adorn_pct_formatting(digits = 2)
data_prob_incorrect <- data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "incongruent"))
sanity_check_1 <- data_prob_correct %>%
full_join(data_prob_incorrect,by="subject") %>%
mutate(check1 = amp_score.x + amp_score.y)
View(sanity_check_1)
sanity_check_1 <- data_prob_correct %>%
full_join(data_prob_incorrect,by="subject") %>%
mutate(check1 = amp_score.x + amp_score.y) %>%
mutate(not_true = ifelse (check1 != 1, "exclude", "include"))
sanity_check_1 %>% count(not_true == "exclude") %>% kable() %>%
kable_classic(full_width = F)
library(knitr)
sanity_check_1 %>% count(not_true == "exclude") %>% kable() %>%
kable_classic(full_width = F)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
library(knitr)
sanity_check_1 %>% count(not_true == "exclude") %>% kable() %>%
kable_classic(full_width = F)
sanity_check_1 %>% count(not_true = "exclude") %>% kable() %>%
kable_classic(full_width = F)
sanity_check_1 %>%
count(not_true = "exclude") %>%
kable(format = "html", table.attr = "class='table table-striped table-bordered'", full_width = FALSE)
sanity_check_1 %>%
count(not_true = "exclude") %>%
kable(format = "html", table.attr = "class'", full_width = FALSE)
sanity_check_1 %>% count(not_true = "exclude") %>% kable() %>%
kable_classic(full_width = F)
sanity_check_1 %>% count(not_true = "exclude") %>% kable()
sanity_check_1 %>% count(not_true = "exclude")
sanity_check_1 %>% count(not_true = "include")
View(sanity_check_1)
sanity_check_1 %>% count(not_true != "include")
sanity_check_1 %>% count(not_true != "include") %>% kable() %>%
kable_classic(full_width = F)
sanity_check_1 %>% count(not_true != "include") %>% kable()
sanity_check_1 %>% count(not_true != "include")
data_prob_correct <- data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "congruent"))
data_test_san_1 <- sanity_check_1%>%
select("not_true" = "include" ) %>%
na.omit(T) %>%
tabyl(prime_congruency) %>%
adorn_pct_formatting(digits = 2)
data_test_san_1 <- sanity_check_1%>%
select("not_true") %>%
na.omit(T) %>%
tabyl(not_true) %>%
adorn_pct_formatting(digits = 2)
View(data_test_san_1)
sanity_check_2 <- data_correct_trials %>%
mutate(check2 = case_when((trialcode == "prime_positive" &
correct == 1 &
prime_congruency == "congruent") |
(trialcode == "prime_negative" &
correct == 0 &
prime_congruency == "congruent")|
(trialcode == "prime_positive" &
correct == 0 &
prime_congruency == "incongruent") |
(trialcode == "prime_negative" &
correct == 1 &
prime_congruency == "incongruent")~ "yes",
TRUE ~"no"))
data_test_san_2 <- sanity_check_2%>%
select("check2" = "yes") %>%
na.omit(T) %>%
tabyl(check2) %>%
adorn_pct_formatting(digits = 2)
data_test_san_2 <- sanity_check_2%>%
select("check2" = "congruent") %>%
na.omit(T) %>%
tabyl(check2) %>%
adorn_pct_formatting(digits = 2)
data_test_san_2 <- sanity_check_2%>%
select("check2") %>%
na.omit(T) %>%
tabyl(check2) %>%
adorn_pct_formatting(digits = 2)
View(sanity_check_2)
View(data_test_san_2)
sanity_check_2 <- data_correct_trials %>%
mutate(check2 = case_when((trialcode == "prime_positive" &
correct == 1 &
prime_congruency == "congruent") |
(trialcode == "prime_negative" &
correct == 0 &
prime_congruency == "congruent")|
(trialcode == "prime_positive" &
correct == 0 &
prime_congruency == "incongruent") |
(trialcode == "prime_negative" &
correct == 1 &
prime_congruency == "incongruent")~ "yes",
TRUE ~"no"))
data_test_san_2 <- sanity_check_2%>%
select("check2") %>%
na.omit(T) %>%
tabyl(check2) %>%
adorn_pct_formatting(digits = 2)
#The AMP was scored in the usual manner. Each participant’s score represented the proportion of prime-congruent ratings (i.e., positive primes that were rated positively, ie “1”; and negative primes that were rated negatively, ie “0), using only trials from the test blocks.
data_correct_trials <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
select(subject, trialcode, correct) %>%
mutate(prime_congruency = case_when((trialcode == "prime_positive" &
correct == 1 ) |
(trialcode == "prime_negative" &
correct == 0)~ "congruent",
TRUE ~"incongruent"))
data_prob_correct <- data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "congruent"))
#First we check the overall percentage and if the congruent and incongruent trials sum up to 1 --> this is the case (Note that you need janitor:: for tably function)
data_san_check_1 <- data_correct_trials %>%
select("prime_congruency") %>%
na.omit(T) %>%
tabyl(prime_congruency) %>%
adorn_pct_formatting(digits = 2)
data_prob_incorrect <- data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "incongruent"))
View(data_correct_trials)
data_prob_correct <- data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "congruent"))
View(data_prob_correct)
View(data_correct_trials)
person_check <- data_correct_trials %>%
filter(subject == "504546409") %>%
summarize(amp_score = mean(prime_congruency == "congruent"))
3/8
#Now we calculate the whole thing with our code conducted before (the summarize part is the same as for our code above)
person_check <- data_correct_trials %>%
filter(subject == "504546409") %>%
summarize(amp_score = mean(prime_congruency == "congruent"))
View(person_check)
#First we check the overall percentage and if the congruent and incongruent trials sum up to 1 --> this is the case (Note that you need janitor:: for tably function)
data_san_check_2 <- data_correct_trials %>%
select("prime_congruency") %>%
na.omit(T) %>%
tabyl(prime_congruency) %>%
adorn_pct_formatting(digits = 2)
data_prob_incorrect <- data_correct_trials %>%
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "incongruent"))
sanity_check_2 <- data_prob_correct %>%
full_join(data_prob_incorrect,by="subject") %>%
mutate(check2 = amp_score.x + amp_score.y) %>%
mutate(not_true = ifelse (check1 != 1, "exclude", "include"))
sanity_check_2 <- data_prob_correct %>%
full_join(data_prob_incorrect,by="subject") %>%
mutate(check2 = amp_score.x + amp_score.y) %>%
mutate(not_true = ifelse (check2 != 1, "exclude", "include"))
data_test_san_2 <- sanity_check_2%>%
select("not_true" = "include") %>%
na.omit(T) %>%
tabyl(not_true) %>%
adorn_pct_formatting(digits = 2)
data_test_san_2 <- sanity_check_2%>%
select("not_true") %>%
na.omit(T) %>%
tabyl(not_true) %>%
adorn_pct_formatting(digits = 2)
View(data_test_san_2)
sanity_check_3 <- data_correct_trials %>%
mutate(check3 = case_when((trialcode == "prime_positive" &
correct == 1 &
prime_congruency == "congruent") |
(trialcode == "prime_negative" &
correct == 0 &
prime_congruency == "congruent")|
(trialcode == "prime_positive" &
correct == 0 &
prime_congruency == "incongruent") |
(trialcode == "prime_negative" &
correct == 1 &
prime_congruency == "incongruent")~ "yes",
TRUE ~"no"))
#Table in order to see if we have no
data_test_san_3 <- sanity_check_3%>%
select("check3") %>%
na.omit(T) %>%
tabyl(check2) %>%
adorn_pct_formatting(digits = 2)
#Table in order to see if we have no
data_test_san_3 <- sanity_check_3%>%
select("check3") %>%
na.omit(T) %>%
tabyl(check3) %>%
adorn_pct_formatting(digits = 2)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed %>%
filter(exclude_participant == "include")
data_processed %>%
count(name = "n") %>%
kable() %>%
add_header_above(header = c("Whole sample" = 1)) %>%  # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed %>%
filter(exclude_participant == "include")
data_processed %>%
count(name = "n") %>%
kable() %>%
add_header_above(header = c("Whole sample" = 1)) %>%  # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions %>%
count(name = "n") %>%
kable() %>%
add_header_above(header = c("For analysis" = 1)) %>%
kable_classic(full_width = FALSE)
data_processed_after_exclusions %>%
mutate(age = as.numeric(age)) %>%
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) %>%
mutate_all(.funs = janitor::round_half_up, digits = 1) %>%
kable() %>%
add_header_above(header = c("Age" = 2)) %>%
kable_classic(full_width = FALSE)
data_processed_after_exclusions %>%
rename(Gender = gender) %>%
group_by(Gender) %>%
summarise(n = n()) %>%
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) %>%
mutate(Gender = stringr::str_to_sentence(Gender)) %>%  # Change the case of the Gender variable so that it prints nicely
kable() %>%
kable_classic(full_width = FALSE)
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions %>%
group_by(group = gender) %>%
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE))
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions %>%
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE)) %>%
mutate(group = "Full sample")
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) %>%
select(Subset = group, Mean, SD) %>%  # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) %>%  # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) %>%
select(Subset = group, Mean, SD) %>%  # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) %>%  # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) %>%
kable() %>%
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 2)) %>%
kable_classic(full_width = FALSE)
data_descriptives_amp <- dat_age_gender %>%
full_join(data_prob_correct, by="subject") %>%
group_by(group = gender) %>%
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE))
View(data_descriptives_amp)
data_descriptives_amp <- dat_age_gender %>%
full_join(data_prob_correct, by="subject") %>%
group_by(group = gender) %>%
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE)) %>% na.omit()
